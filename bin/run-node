#!/usr/bin/env bash

set -eo pipefail

echo "Running the cardano node ..."

# setup options
shift
options=(${@})
for i in ${!options[@]}; do
	j=$((i+1))
	k=${options[i]}
	v=${options[j]}
	found=false
	case ${k} in
		--config) CARDANO_CONFIG=${v}; found=true ;;
		--database-path) CARDANO_DATABASE_PATH=${v}; found=true ;;
		--host-addr) CARDANO_BIND_ADDR=${v}; found=true ;;
		--port) CARDANO_PORT=${v}; found=true ;;
		--shelley-kes-key) CARDANO_SHELLEY_KES_KEY=${v}; found=true ;;
		--shelley-operational-certificate) CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE=${v}; found=true ;;
		--shelley-vrf-key) CARDANO_SHELLEY_VRF_KEY=${v}; found=true ;;
		--socket-path) CARDANO_SOCKET_PATH=${v}; found=true ;;
		--topology) CARDANO_TOPOLOGY=${v}; found=true ;;
	esac
	if [[ ${found} == true ]]; then
		options[i]="";
		options[j]="";
	fi
done

# variables
CARDANO_CONFIG_BASE=${CARDANO_CONFIG_BASE:-/opt/cardano/config}
CARDANO_NETWORK=${CARDANO_NETWORK:-mainnet}
# common
CARDANO_BIND_ADDR=${CARDANO_BIND_ADDR:-0.0.0.0}
CARDANO_BLOCK_PRODUCER=${CARDANO_BLOCK_PRODUCER:-false}
CARDANO_CONFIG=${CARDANO_CONFIG:-${CARDANO_CONFIG_BASE}/${CARDANO_NETWORK}/config.json}
CARDANO_DATABASE_PATH=${CARDANO_DATABASE_PATH:-/opt/cardano/data}
CARDANO_LOG_DIR=${CARDANO_LOG_DIR:-/opt/cardano/logs}
CARDANO_PORT=${CARDANO_PORT:-3001}
CARDANO_RTS_OPTS=${CARDANO_RTS_OPTS:--N2 -A64m -I0 -qg -qb --disable-delayed-os-memory-return}
CARDANO_SOCKET_PATH=${CARDANO_SOCKET_PATH:-/opt/cardano/ipc/socket}
CARDANO_TOPOLOGY=${CARDANO_TOPOLOGY:-${CARDANO_CONFIG_BASE}/${CARDANO_NETWORK}/topology.json}
# mithril and devnet
case ${CARDANO_NETWORK} in
	mainnet|preprod) __path=release-${CARDANO_NETWORK} ;;
	preview) __path=pre-release-${CARDANO_NETWORK} ;;
	sanchonet) __path=testing-${CARDANO_NETWORK} ;;
	devnet)
		# For devnet, we run as a block producer
		CARDANO_BLOCK_PRODUCER=true
		CARDANO_SHELLEY_KES_KEY=${CARDANO_CONFIG_BASE}/${CARDANO_NETWORK}/keys/kes.skey
		CARDANO_SHELLEY_VRF_KEY=${CARDANO_CONFIG_BASE}/${CARDANO_NETWORK}/keys/vrf.skey
		CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE=${CARDANO_CONFIG_BASE}/${CARDANO_NETWORK}/keys/opcert.cert
		RESTORE_SNAPSHOT=false
		__path=testing-${CARDANO_NETWORK}
		# clean up old data
		rm -rf ${CARDANO_DATABASE_PATH}/*
		# empty topology
		echo '{"Producers": []}' > ${CARDANO_TOPOLOGY}
		# network start times
		sed -i "s/\"startTime\": [0-9]*/\"startTime\": $(date +%s)/" \
			${CARDANO_CONFIG_BASE}/${CARDANO_NETWORK}/byron-genesis.json
		sed -i "s/\"systemStart\": \".*\"/\"systemStart\": \"$(date -u +%FT%TZ)\"/" \
			${CARDANO_CONFIG_BASE}/${CARDANO_NETWORK}/shelley-genesis.json
		# update permissions on keys
		find ${CARDANO_CONFIG_BASE}/${CARDANO_NETWORK}/keys/ -type f -name \*.skey | xargs chmod 0400
		;;
esac
AGGREGATOR_ENDPOINT=${AGGREGATOR_ENDPOINT:-https://aggregator.${__path}.api.mithril.network/aggregator}
GENESIS_VERIFICATION_KEY_PATH=${GENESIS_VERIFICATION_KEY_PATH:-${CARDANO_CONFIG_BASE}/${CARDANO_NETWORK}/genesis.vkey}
if [[ -z $GENESIS_VERIFICATION_KEY && -f $GENESIS_VERIFICATION_KEY_PATH ]]; then
	GENESIS_VERIFICATION_KEY=$(<${GENESIS_VERIFICATION_KEY_PATH})
fi
SNAPSHOT_DIGEST=${SNAPSHOT_DIGEST:-latest}
RESTORE_SNAPSHOT=${RESTORE_SNAPSHOT:-true}

echo CARDANO_BIND_ADDR=${CARDANO_BIND_ADDR}
echo CARDANO_BLOCK_PRODUCER=${CARDANO_BLOCK_PRODUCER}
echo CARDANO_CONFIG=${CARDANO_CONFIG}
echo CARDANO_DATABASE_PATH=${CARDANO_DATABASE_PATH}
echo CARDANO_LOG_DIR=${CARDANO_LOG_DIR}
echo CARDANO_NETWORK=${CARDANO_NETWORK}
echo CARDANO_PORT=${CARDANO_PORT}
echo CARDANO_RTS_OPTS=${CARDANO_RTS_OPTS}
echo CARDANO_SOCKET_PATH=${CARDANO_SOCKET_PATH}
echo CARDANO_TOPOLOGY=${CARDANO_TOPOLOGY}

# block producer only
if [[ ${CARDANO_BLOCK_PRODUCER} == true ]]; then
	CARDANO_SHELLEY_KES_KEY=${CARDANO_SHELLEY_KES_KEY:-${CARDANO_CONFIG_BASE}/keys/kes.skey}
	CARDANO_SHELLEY_VRF_KEY=${CARDANO_SHELLEY_VRF_KEY:-${CARDANO_CONFIG_BASE}/keys/vrf.skey}
	CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE=${CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE:-${CARDANO_CONFIG_BASE}/keys/node.cert}
	echo CARDANO_SHELLEY_KES_KEY=${CARDANO_SHELLEY_KES_KEY}
	echo CARDANO_SHELLEY_VRF_KEY=${CARDANO_SHELLEY_VRF_KEY}
	echo CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE=${CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE}
else
	set +e
	# Check if our configuration is writable (may be different from permissions)
	touch ${CARDANO_CONFIG} 2>&1 >/dev/null
	if test $? -eq 0; then
		sed -i \
			-e 's/"PeerSharing": false/"PeerSharing": true/' \
			-e 's/"TraceMempool": false/"TraceMempool": true/' \
			${CARDANO_CONFIG}
	fi
	set -e
fi

echo AGGREGATOR_ENDPOINT=${AGGREGATOR_ENDPOINT}
echo GENESIS_VERIFICATION_KEY=${GENESIS_VERIFICATION_KEY}
echo SNAPSHOT_DIGEST=${SNAPSHOT_DIGEST}
echo RESTORE_SNAPSHOT=${RESTORE_SNAPSHOT}

mkdir -p $(dirname ${CARDANO_SOCKET_PATH})

# Mithril
if ! test -e ${CARDANO_DATABASE_PATH}/protocolMagicId; then
	echo "Detected empty ${CARDANO_DATABASE_PATH}"
	if [[ ${RESTORE_SNAPSHOT} == true ]]; then
		mkdir -p $(dirname ${CARDANO_DATABASE_PATH})
		cd $(dirname ${CARDANO_DATABASE_PATH})
		export AGGREGATOR_ENDPOINT GENESIS_VERIFICATION_KEY SNAPSHOT_DIGEST
		echo "Starting: /usr/local/bin/mithril-client cardano-db download ${SNAPSHOT_DIGEST}"
		if [[ $(cd ${CARDANO_DATABASE_PATH} 2>/dev/null; pwd -P) != $(pwd -P)/db ]]; then
			rm -rf db/*
		fi
		# Handle SIGTERM during initial sync
		trap 'kill -TERM $(pidof mithril-client)' TERM
		# Run mithril-client in the background so we can capture the PID and wait
		mithril-client cardano-db download ${SNAPSHOT_DIGEST} &
		_mithril_pid=$!
		wait $_mithril_pid || exit $?
		# Reset signal handler and wait again (to avoid race condition)
		trap - TERM
		wait $_mithril_pid || exit $?
		if [[ $(cd ${CARDANO_DATABASE_PATH}; pwd -P) != $(pwd -P)/db ]]; then
			mv -f db/* ${CARDANO_DATABASE_PATH}/
		fi
	else
		mkdir -p ${CARDANO_DATABASE_PATH}
	fi
elif [[ ${RESTORE_SNAPSHOT} == true ]]; then
	echo "Detected populated ${CARDANO_DATABASE_PATH}... skipping restore"
fi

cd ${CARDANO_DATABASE_PATH}

if [[ ${SOCAT_PORT:-0} != 0 ]]; then
	echo "Port ${SOCAT_PORT} configured for socat... launching in background"
	nohup socat TCP-LISTEN:${SOCAT_PORT},fork UNIX-CLIENT:${CARDANO_SOCKET_PATH},ignoreeof &
fi

if [[ ${CARDANO_BLOCK_PRODUCER} == true ]]; then
	effopts=(--config ${CARDANO_CONFIG} \
		--database-path ${CARDANO_DATABASE_PATH} \
		--host-addr ${CARDANO_BIND_ADDR} \
		--port ${CARDANO_PORT} \
		--shelley-kes-key ${CARDANO_SHELLEY_KES_KEY} \
		--shelley-operational-certificate ${CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE} \
		--shelley-vrf-key ${CARDANO_SHELLEY_VRF_KEY} \
		--socket-path ${CARDANO_SOCKET_PATH} \
		--topology ${CARDANO_TOPOLOGY})
else
	effopts=(--config ${CARDANO_CONFIG} \
		--database-path ${CARDANO_DATABASE_PATH} \
		--host-addr ${CARDANO_BIND_ADDR} \
		--port ${CARDANO_PORT} \
		--socket-path ${CARDANO_SOCKET_PATH} \
		--topology ${CARDANO_TOPOLOGY})
fi
effopts+=(${options[@]})
# RTS support
read -ra rtsopts <<< ${CARDANO_RTS_OPTS}
effopts+=("+RTS" ${rtsopts[@]} "-RTS")
echo cardano-node run ${effopts[@]}
exec /usr/local/bin/cardano-node run ${effopts[@]}
